/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Article = {
  _id: string;
  _type: "article";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  description?: string;
  taxonomies?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "taxonomy";
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Gallery = {
  _type: "Gallery";
  style?: "swiper" | "gallery";
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type Contact = {
  _type: "Contact";
  buttonText?: string;
};

export type Image = {
  _type: "Image";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  accented?: boolean;
};

export type Archive = {
  _type: "Archive";
  archiveType?: "article";
  description?: string;
  filterable?: boolean;
  featuredTaxonomies?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "taxonomy";
  }>;
};

export type Info = {
  _type: "Info";
  title: string;
  items?: Array<{
    title?: string;
    subTitle?: string;
    infoType: "icon" | "number";
    icon?: Icon;
    number?: number;
    _type: "item";
    _key: string;
  }>;
};

export type Newsletter = {
  _type: "Newsletter";
  note?: string;
  callToAction?: string;
  text?: string;
};

export type FeaturedArticles = {
  _type: "FeaturedArticles";
  title: string;
  articles?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "article";
  }>;
};

export type Text = {
  _type: "Text";
  text?: string;
};

export type FeaturedTaxonomies = {
  _type: "FeaturedTaxonomies";
  taxonomies?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "taxonomy";
  }>;
};

export type Taxonomy = {
  _id: string;
  _type: "taxonomy";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  descriptiveNote?: string;
  icon?: Icon;
  prefLabel: string;
  definition?: string;
  related?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "taxonomy";
  };
  broader?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "taxonomy";
  };
  narrower?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "taxonomy";
  };
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blurb?: string;
  contact?: Contact;
  about?: string;
  homepage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  navigation?: Array<{
    _key: string;
  } & NavGroup>;
};

export type NavGroup = {
  _type: "navGroup";
  title?: string;
  items?: Array<{
    title?: string;
    page: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "archive";
    };
    _type: "item";
    _key: string;
  }>;
};

export type Note = string;

export type Mdx = string;

export type Contact_2 = {
  _type: "contact";
  email?: string;
  phone?: string;
  website?: Link;
  socials?: Array<{
    _key: string;
  } & Social>;
};

export type BasicDate = {
  _type: "basicDate";
  displayDateSpecificity: "YYYY-MM-DD, HH:mm" | "YYYY-MM-DD" | "YYYY-MM" | "YYYY";
  recurrence?: "" | "RRULE:FREQ=DAILY;INTERVAL=1" | "RRULE:FREQ=WEEKLY;INTERVAL=1" | "RRULE:FREQ=MONTHLY;INTERVAL=1" | "RRULE:FREQ=YEARLY;INTERVAL=1";
  startDate?: string;
  endDate?: string;
};

export type Link = {
  _type: "link";
  text: string;
  type?: "internal" | "external";
  link?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "archive";
  };
};

export type Archive_2 = {
  _id: string;
  _type: "archive";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Mdx;
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blocks?: Array<{
    _key: string;
  } & FeaturedTaxonomies | {
    _key: string;
  } & Text | {
    _key: string;
  } & FeaturedArticles | {
    _key: string;
  } & Newsletter | {
    _key: string;
  } & Info | {
    _key: string;
  } & Archive | {
    _key: string;
  } & Image | {
    _key: string;
  } & Contact | {
    _key: string;
  } & Gallery>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Mdx;
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blocks?: Array<{
    _key: string;
  } & FeaturedTaxonomies | {
    _key: string;
  } & Text | {
    _key: string;
  } & FeaturedArticles | {
    _key: string;
  } & Newsletter | {
    _key: string;
  } & Info | {
    _key: string;
  } & Archive | {
    _key: string;
  } & Image | {
    _key: string;
  } & Contact | {
    _key: string;
  } & Gallery>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Social = {
  _type: "social";
  socialTitle: string;
  socialType: "twitter" | "instagram" | "facebook" | "vimeo" | "linkedin" | "github" | "mastodon";
  url: string;
};

export type Icon = {
  _type: "icon";
  name?: string;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Article | Gallery | Contact | Image | Archive | Info | Newsletter | FeaturedArticles | Text | FeaturedTaxonomies | Taxonomy | Settings | NavGroup | Note | Mdx | Contact_2 | BasicDate | Link | Archive_2 | Page | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Social | Icon | MediaTag | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/partials.ts
// Variable: partial_Sections
// Query: sections[] {		...,		blocks[] {				...,	_type == "Archive" => {		...,		featuredTaxonomies[]-> {			...,		} 	},	_type == "FeaturedTaxonomies" => {		...,		taxonomies[]->,	},	_type == "FeaturedArticles" => {		...,		articles[]-> {			...,			image {					...,	"imageAsset":asset->			}		},	},	_type == "Image" => {		...,		image {				...,	"imageAsset":asset->		}	},	_type == "Gallery" => {		...,		images[] {				...,	"imageAsset":asset->		}	},		}	}
export type Partial_SectionsResult = never;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n\tsections[] {\n\t\t...,\n\t\tblocks[] {\n\t\t\t\n\t...,\n\t_type == \"Archive\" => {\n\t\t...,\n\t\tfeaturedTaxonomies[]-> {\n\t\t\t...,\n\t\t} \n\t},\n\t_type == \"FeaturedTaxonomies\" => {\n\t\t...,\n\t\ttaxonomies[]->,\n\t},\n\t_type == \"FeaturedArticles\" => {\n\t\t...,\n\t\tarticles[]-> {\n\t\t\t...,\n\t\t\timage {\n\t\t\t\t\n\t...,\n\t\"imageAsset\":asset->\n\n\t\t\t}\n\t\t},\n\t},\n\t_type == \"Image\" => {\n\t\t...,\n\t\timage {\n\t\t\t\n\t...,\n\t\"imageAsset\":asset->\n\n\t\t}\n\t},\n\t_type == \"Gallery\" => {\n\t\t...,\n\t\timages[] {\n\t\t\t\n\t...,\n\t\"imageAsset\":asset->\n\n\t\t}\n\t}\n,\n\t\t}\n\t}\n": Partial_SectionsResult;
  }
}
